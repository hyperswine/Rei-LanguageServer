{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Rei",
    "fileTypes": [
        "rei"
    ],
    "scopeName": "source.rei",
    "patterns": [
        {
            "comment": "boxed slice literal",
            "begin": "(<)(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.brackets.angle.rei"
                },
                "2": {
                    "name": "punctuation.brackets.square.rei"
                }
            },
            "end": ">",
            "endCaptures": {
                "0": {
                    "name": "punctuation.brackets.angle.rei"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#gtypes"
                },
                {
                    "include": "#lvariables"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#types"
                }
            ]
        },
        {
            "comment": "annotations",
            "name": "meta.attribute.rei",
            "begin": "(@)(\\!?)(\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.attribute.rei"
                },
                "2": {
                    "name": "keyword.operator.attribute.inner.rei"
                },
                "3": {
                    "name": "punctuation.brackets.attribute.rei"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.brackets.attribute.rei"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#gtypes"
                },
                {
                    "include": "#types"
                }
            ]
        },
        {
            "comment": "modules",
            "match": "(mod)\\s+((?:r#(?!outer|[Ss]elf|pkg))?[a-z][A-Za-z0-9_]*)",
            "captures": {
                "1": {
                    "name": "storage.type.rei"
                },
                "2": {
                    "name": "entity.name.module.rei"
                }
            }
        },
        {
            "comment": "external import",
            "name": "meta.import.rei",
            "begin": "\\b(extern)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.rei"
                },
                "2": {
                    "name": "keyword.other.pkg.rei"
                }
            },
            "end": "[ \t\n]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.semi.rei"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#punctuation"
                }
            ]
        },
        {
            "comment": "export statements",
            "name": "meta.export.rei",
            "begin": "\\b(export)\\s",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.rei"
                }
            },
            "end": "[ \t\n]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.semi.rei"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#namespaces"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#lvariables"
                }
            ]
        },
        {
            "include": "#block-comments"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#lvariables"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#gtypes"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#types"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#namespaces"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "comment": "line comments",
                    "name": "comment.line.double-slash.rei",
                    "match": "//.*"
                },
                {
                    "comment": "doc comments",
                    "name": "comment.line.number-sign.rei",
                    "match": "#.*"
                }
            ]
        },
        "block-comments": {
            "patterns": [
                {
                    "comment": "general block comments",
                    "name": "comment.block.rei",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "comment": "block documentation comments",
                    "name": "comment.block.documentation.rei",
                    "begin": "#\\*",
                    "end": "\\*#"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "comment": "ALL CAPS constants",
                    "name": "constant.other.caps.rei",
                    "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
                },
                {
                    "comment": "constant declarations",
                    "match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.rei"
                        },
                        "2": {
                            "name": "constant.other.caps.rei"
                        }
                    }
                },
                {
                    "comment": "decimal integers and floats",
                    "name": "constant.numeric.decimal.rei",
                    "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E)([+-])([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.dot.decimal.rei"
                        },
                        "2": {
                            "name": "keyword.operator.exponent.rei"
                        },
                        "3": {
                            "name": "keyword.operator.exponent.sign.rei"
                        },
                        "4": {
                            "name": "constant.numeric.decimal.exponent.mantissa.rei"
                        },
                        "5": {
                            "name": "entity.name.type.numeric.rei"
                        }
                    }
                },
                {
                    "comment": "hexadecimal integers",
                    "name": "constant.numeric.hex.rei",
                    "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.rei"
                        }
                    }
                },
                {
                    "comment": "octal integers",
                    "name": "constant.numeric.oct.rei",
                    "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.rei"
                        }
                    }
                },
                {
                    "comment": "binary integers",
                    "name": "constant.numeric.bin.rei",
                    "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.rei"
                        }
                    }
                },
                {
                    "comment": "booleans",
                    "name": "constant.language.bool.rei",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "escapes": {
            "comment": "escapes: ASCII, byte, Unicode, quote, regex",
            "name": "constant.character.escape.rei",
            "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
            "captures": {
                "1": {
                    "name": "constant.character.escape.backslash.rei"
                },
                "2": {
                    "name": "constant.character.escape.bit.rei"
                },
                "3": {
                    "name": "constant.character.escape.unicode.rei"
                },
                "4": {
                    "name": "constant.character.escape.unicode.punctuation.rei"
                },
                "5": {
                    "name": "constant.character.escape.unicode.punctuation.rei"
                }
            }
        },
        "functions": {
            "patterns": [
                {
                    "comment": "annotation definition",
                    "name": "meta.annotation.definition.rei",
                    "match": "\\b(@)\\s+([A-Z][A-Za-z0-9]*)"
                },
                {
                    "comment": "function definition",
                    "name": "meta.function.definition.rei",
                    "begin": "\\b(fn)\\s+((?:r#(?!outer|[Ss]elf|pkg))?[A-Za-z0-9_]+)((\\()|(<))",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.fn.rei"
                        },
                        "2": {
                            "name": "entity.name.function.rei"
                        },
                        "4": {
                            "name": "punctuation.brackets.round.rei"
                        },
                        "5": {
                            "name": "punctuation.brackets.angle.rei"
                        }
                    },
                    "end": "\\{",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.curly.rei"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#gtypes"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#namespaces"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                },
                {
                    "comment": "function/method calls, chaining",
                    "name": "meta.function.call.rei",
                    "begin": "((?:r#(?!outer|[Ss]elf|pkg))?[A-Za-z0-9_]+)(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.rei"
                        },
                        "2": {
                            "name": "punctuation.brackets.round.rei"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.rei"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#gtypes"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#namespaces"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                },
                {
                    "comment": "function/method calls with turbofish",
                    "name": "meta.function.call.rei",
                    "begin": "((?:r#(?!outer|[Ss]elf|pkg))?[A-Za-z0-9_]+)(?=::<.*>\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.rei"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.rei"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#gtypes"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#namespaces"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "comment": "control flow keywords",
                    "name": "keyword.control.rei",
                    "match": "\\b(await|break|continue|do|else|for|if|loop|match|return|while|yield)\\b"
                },
                {
                    "comment": "const keyword",
                    "name": "storage.modifier.rei",
                    "match": "\\b(const|extern|let|mut|mod)\\b"
                },
                {
                    "comment": "type keyword",
                    "name": "keyword.declaration.type.rei storage.type.rei",
                    "match": "\\b(type)\\b"
                },
                {
                    "comment": "enum keyword",
                    "name": "keyword.declaration.enum.rei storage.type.rei",
                    "match": "\\b(enum)\\b"
                },
                {
                    "comment": "union keyword",
                    "name": "keyword.declaration.union.rei storage.type.rei",
                    "match": "\\b(union)\\b"
                },
                {
                    "comment": "trait keyword",
                    "name": "keyword.declaration.trait.rei storage.type.rei",
                    "match": "\\b(trait)\\b"
                },
                {
                    "comment": "data keyword",
                    "name": "keyword.declaration.data.rei storage.type.rei",
                    "match": "\\b(data)\\b"
                },
                {
                    "comment": "system keyword",
                    "name": "keyword.declaration.system.rei storage.type.rei",
                    "match": "\\b(system)\\b"
                },
                {
                    "comment": "class keyword",
                    "name": "keyword.declaration.class.rei storage.type.rei",
                    "match": "\\b(class)\\b"
                },
                {
                    "comment": "other keywords",
                    "name": "keyword.other.rei",
                    "match": "\\b(annotation|macro|as|async|new|impl|default|complex|extend|with|in|pub|internal|require|ref|unsafe|use|where|or|and|is|static)\\b"
                },
                {
                    "comment": "fn",
                    "name": "keyword.other.fn.rei",
                    "match": "\\bfn\\b"
                },
                {
                    "comment": "logical operators",
                    "name": "keyword.operator.logical.rei",
                    "match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
                },
                {
                    "comment": "logical AND, borrow references",
                    "name": "keyword.operator.borrow.and.rei",
                    "match": "&(?![&=])"
                },
                {
                    "comment": "assignment operators",
                    "name": "keyword.operator.assignment.rei",
                    "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
                },
                {
                    "comment": "single equal",
                    "name": "keyword.operator.assignment.equal.rei",
                    "match": "(?<![<>])=(?!=|>)"
                },
                {
                    "comment": "comparison operators",
                    "name": "keyword.operator.comparison.rei",
                    "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
                },
                {
                    "comment": "math operators",
                    "name": "keyword.operator.math.rei",
                    "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
                },
                {
                    "comment": "less than, greater than (special case)",
                    "match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
                    "captures": {
                        "1": {
                            "name": "punctuation.brackets.round.rei"
                        },
                        "2": {
                            "name": "punctuation.brackets.square.rei"
                        },
                        "3": {
                            "name": "punctuation.brackets.curly.rei"
                        },
                        "4": {
                            "name": "keyword.operator.comparison.rei"
                        },
                        "5": {
                            "name": "punctuation.brackets.round.rei"
                        },
                        "6": {
                            "name": "punctuation.brackets.square.rei"
                        },
                        "7": {
                            "name": "punctuation.brackets.curly.rei"
                        }
                    }
                },
                {
                    "comment": "namespace operator",
                    "name": "keyword.operator.namespace.rei",
                    "match": "::"
                },
                {
                    "comment": "dereference asterisk",
                    "match": "(\\*)(?=\\w+)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.dereference.rei"
                        }
                    }
                },
                {
                    "comment": "subpattern binding",
                    "name": "keyword.operator.subpattern.rei",
                    "match": "@"
                },
                {
                    "comment": "dot access",
                    "name": "keyword.operator.access.dot.rei",
                    "match": "\\.(?!\\.)"
                },
                {
                    "comment": "ranges, range patterns",
                    "name": "keyword.operator.range.rei",
                    "match": "\\.{2}(=|\\.)?"
                },
                {
                    "comment": "colon",
                    "name": "keyword.operator.key-value.rei",
                    "match": ":(?!:)"
                },
                {
                    "comment": "dashrocket, skinny arrow",
                    "name": "keyword.operator.arrow.skinny.rei",
                    "match": "->"
                },
                {
                    "comment": "hashrocket, fat arrow",
                    "name": "keyword.operator.arrow.fat.rei",
                    "match": "=>"
                }
            ]
        },
        "interpolations": {
            "comment": "curly brace interpolations",
            "name": "meta.interpolation.rei",
            "match": "({)[^\"{}]*(})",
            "captures": {
                "1": {
                    "name": "punctuation.definition.interpolation.rei"
                },
                "2": {
                    "name": "punctuation.definition.interpolation.rei"
                }
            }
        },
        "namespaces": {
            "patterns": [
                {
                    "comment": "namespace (non-type, non-function path segment)",
                    "match": "(?<![A-Za-z0-9_])([a-z0-9_]+)((?<!outer|pkg|self)::)",
                    "captures": {
                        "1": {
                            "name": "entity.name.namespace.rei"
                        },
                        "2": {
                            "name": "keyword.operator.namespace.rei"
                        }
                    }
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "comment": "numeric types",
                    "match": "(?<![A-Za-z])(f16|f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.rei"
                        }
                    }
                },
                {
                    "comment": "parameterized types",
                    "begin": "\\b([A-Z][A-Za-z0-9]*)(<)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.rei"
                        },
                        "2": {
                            "name": "punctuation.brackets.angle.rei"
                        }
                    },
                    "end": ">",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.angle.rei"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                },
                {
                    "comment": "primitive types",
                    "name": "entity.name.type.primitive.rei",
                    "match": "\\b(bool|char|str)\\b"
                },
                {
                    "comment": "trait declarations",
                    "match": "\\b(trait)\\s+([A-Z][A-Za-z0-9]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.trait.rei storage.type.rei"
                        },
                        "2": {
                            "name": "entity.name.type.trait.rei"
                        }
                    }
                },
                {
                    "comment": "data declarations",
                    "match": "\\b(data)\\s+([A-Z][A-Za-z0-9]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.data.rei storage.type.rei"
                        },
                        "2": {
                            "name": "entity.name.type.data.rei"
                        }
                    }
                },
                {
                    "comment": "system declarations",
                    "match": "\\b(system)\\s+([A-Z][A-Za-z0-9]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.system.rei storage.type.rei"
                        },
                        "2": {
                            "name": "entity.name.type.system.rei"
                        }
                    }
                },
                {
                    "comment": "enum declarations",
                    "match": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.enum.rei storage.type.rei"
                        },
                        "2": {
                            "name": "entity.name.type.enum.rei"
                        }
                    }
                },
                {
                    "comment": "union declarations",
                    "match": "\\b(union)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.union.rei storage.type.rei"
                        },
                        "2": {
                            "name": "entity.name.type.union.rei"
                        }
                    }
                },
                {
                    "comment": "type declarations",
                    "match": "\\b(type)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.type.rei storage.type.rei"
                        },
                        "2": {
                            "name": "entity.name.type.declaration.rei"
                        }
                    }
                },
                {
                    "comment": "types",
                    "name": "entity.name.type.rei",
                    "match": "\\b[A-Z][A-Za-z0-9]*\\b(?!!)"
                }
            ]
        },
        "gtypes": {
            "patterns": [
                {
                    "comment": "option types",
                    "name": "entity.name.type.option.rei",
                    "match": "\\b(Some|None)\\b"
                },
                {
                    "comment": "result types",
                    "name": "entity.name.type.result.rei",
                    "match": "\\b(Ok|Err)\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "comment": "comma",
                    "name": "punctuation.comma.rei",
                    "match": ","
                },
                {
                    "comment": "curly braces",
                    "name": "punctuation.brackets.curly.rei",
                    "match": "[{}]"
                },
                {
                    "comment": "parentheses, round brackets",
                    "name": "punctuation.brackets.round.rei",
                    "match": "[()]"
                },
                {
                    "comment": "whitespace",
                    "name": "punctuation.ws.rei",
                    "match": "[ \n\t]"
                },
                {
                    "comment": "square brackets",
                    "name": "punctuation.brackets.square.rei",
                    "match": "[\\[\\]]"
                },
                {
                    "comment": "angle brackets",
                    "name": "punctuation.brackets.angle.rei",
                    "match": "(?<!=)[<>]"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "comment": "double-quoted strings and byte strings",
                    "name": "string.quoted.double.rei",
                    "begin": "(b?)(\")",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.rei"
                        },
                        "2": {
                            "name": "punctuation.definition.string.rei"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.rei"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escapes"
                        },
                        {
                            "include": "#interpolations"
                        }
                    ]
                },
                {
                    "comment": "double-quoted raw strings and raw byte strings",
                    "name": "string.quoted.double.rei",
                    "begin": "(b?r)(#*)(\")",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.rei"
                        },
                        "2": {
                            "name": "punctuation.definition.string.raw.rei"
                        },
                        "3": {
                            "name": "punctuation.definition.string.rei"
                        }
                    },
                    "end": "(\")(\\2)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.rei"
                        },
                        "2": {
                            "name": "punctuation.definition.string.raw.rei"
                        }
                    }
                },
                {
                    "comment": "characters and bytes",
                    "name": "string.quoted.single.char.rei",
                    "begin": "(b)?(')",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.rei"
                        },
                        "2": {
                            "name": "punctuation.definition.char.rei"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.char.rei"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escapes"
                        }
                    ]
                }
            ]
        },
        "lvariables": {
            "patterns": [
                {
                    "comment": "self",
                    "name": "variable.language.self.rei",
                    "match": "\\b[Ss]elf\\b"
                },
                {
                    "comment": "super",
                    "name": "variable.language.super.rei",
                    "match": "\\bsuper\\b"
                },
                {
                    "comment": "pkg",
                    "name": "variable.language.pkg.rei",
                    "match": "\\bpkg\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "comment": "variables",
                    "name": "variable.other.rei",
                    "match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(outer|[Ss]elf|pkg)))?[a-z0-9_]+\\b"
                }
            ]
        }
    }
}