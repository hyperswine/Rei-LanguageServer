{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Rei",
  "fileTypes": [
    "rei"
  ],
  "scopeName": "source.rei",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#literal_constants"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#structural_operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#escapes"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "comment": "line comments",
          "name": "comment.line.double-slash.rei",
          "match": "//.*"
        },
        {
          "comment": "doc comments",
          "name": "comment.line.number-sign.rei",
          "match": "#.*"
        },
        {
          "comment": "general block comments",
          "name": "comment.block.rei",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "comment": "block documentation comments",
          "name": "comment.block.documentation.rei",
          "begin": "#\\*",
          "end": "\\*#"
        }
      ]
    },
    "literal_constants": {
      "patterns": [
        {
          "comment": "decimal integers and floats",
          "name": "constant.numeric.decimal.rei",
          "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E)([+-])([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "punctuation.separator.dot.decimal.rei"
            },
            "2": {
              "name": "keyword.operator.exponent.rei"
            },
            "3": {
              "name": "keyword.operator.exponent.sign.rei"
            },
            "4": {
              "name": "constant.numeric.decimal.exponent.mantissa.rei"
            },
            "5": {
              "name": "entity.name.type.numeric.rei"
            }
          }
        },
        {
          "comment": "hexadecimal integers",
          "name": "constant.numeric.hex.rei",
          "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.rei"
            }
          }
        },
        {
          "comment": "binary integers",
          "name": "constant.numeric.bin.rei",
          "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.rei"
            }
          }
        },
        {
          "comment": "escapes: ASCII, byte, Unicode, quote, regex",
          "name": "constant.character.escape.rei",
          "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
          "captures": {
            "1": {
              "name": "constant.character.escape.backslash.rei"
            },
            "2": {
              "name": "constant.character.escape.bit.rei"
            },
            "3": {
              "name": "constant.character.escape.unicode.rei"
            },
            "4": {
              "name": "constant.character.escape.unicode.punctuation.rei"
            },
            "5": {
              "name": "constant.character.escape.unicode.punctuation.rei"
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "comment": "annotation definition",
          "name": "meta.annotation.definition.rei",
          "match": "\\b(@)\\s+([A-Z][A-Za-z0-9]*)"
        },
        {
          "comment": "function",
          "name": "meta.type.function.rei",
          "match": "\\b([a-z_][a-zA-Z0-9_\\-]*)\\:",
          "captures": {
            "1": {
              "name": "entity.name.function.rei"
            }
          }
        }
      ]
    },
    "structural_operators": {
      "patterns": [
        {
          "comment": "dot access",
          "name": "keyword.operator.access.dot.rei",
          "match": "\\.(?!\\.)"
        },
        {
          "comment": "ranges ..",
          "name": "keyword.operator.range.rei",
          "match": "\\.{2}"
        },
        {
          "comment": "colon",
          "name": "keyword.operator.key-value.rei",
          "match": ":(?!:)"
        },
        {
          "comment": "dashrocket",
          "name": "keyword.operator.arrow.skinny.rei",
          "match": "->"
        },
        {
          "comment": "hashrocket",
          "name": "keyword.operator.arrow.fat.rei",
          "match": "=>"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "types",
          "name": "entity.name.type.rei",
          "match": "\\b[A-Z][A-Za-z0-9]*\\b(?!!)"
        },
        {
          "comment": "booleans",
          "name": "constant.language.bool.rei",
          "match": "\\b(true|false)\\b"
        },
        {
          "comment": "enum keyword",
          "name": "keyword.declaration.enum.rei storage.type.rei",
          "match": "\\b(enum)\\b"
        },
        {
          "comment": "data keyword",
          "name": "keyword.declaration.data.rei storage.type.rei",
          "match": "\\b(data)\\b"
        },
        {
          "comment": "seq keyword",
          "name": "keyword.declaration.seq.rei storage.type.rei",
          "match": "\\b(seq)\\b"
        },
        {
          "match": "\\b\\[A-Z][A-Za-z0-9]*\\s*:\\s*(data|enum)",
          "captures": {
            "1": {
              "name": "entity.name.struct"
            },
            "2": {
              "name": "keyword.declaration storage.type.rei"
            }
          }
        },
        {
          "comment": "option types",
          "name": "entity.name.type.option.rei",
          "match": "\\b(Just|None)\\b"
        },
        {
          "comment": "result types",
          "name": "entity.name.type.result.rei",
          "match": "\\b(Exist|Error)\\b"
        },
        {
          "comment": "variables",
          "name": "variable.other.rei",
          "match": "_?[a-z0-9][a-z0-9_-]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "comment": "comma",
          "name": "punctuation.comma.rei",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.rei",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.rei",
          "match": "[()]"
        },
        {
          "comment": "whitespace",
          "name": "punctuation.ws.rei",
          "match": "[ \n\t]"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.rei",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.rei",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "escapes": {
      "comment": "escapes: ASCII, byte, Unicode, quote, regex",
      "name": "constant.character.escape.rei",
      "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
      "captures": {
        "1": {
          "name": "constant.character.escape.backslash.rei"
        },
        "2": {
          "name": "constant.character.escape.bit.rei"
        },
        "3": {
          "name": "constant.character.escape.unicode.rei"
        },
        "4": {
          "name": "constant.character.escape.unicode.punctuation.rei"
        },
        "5": {
          "name": "constant.character.escape.unicode.punctuation.rei"
        }
      }
    },
    "strings": {
      "patterns": [
        {
          "comment": "double-quoted strings and byte strings",
          "name": "string.quoted.double.rei",
          "begin": "(b?)(\")",
          "beginCaptures": {
            "1": {
              "name": "string.quoted.byte.raw.rei"
            },
            "2": {
              "name": "punctuation.definition.string.rei"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.rei"
            }
          },
          "patterns": [
            {
              "include": "#escapes"
            }
          ]
        },
        {
          "comment": "double-quoted raw strings and raw byte strings",
          "name": "string.quoted.double.rei",
          "begin": "(b?r)(#*)(\")",
          "beginCaptures": {
            "1": {
              "name": "string.quoted.byte.raw.rei"
            },
            "2": {
              "name": "punctuation.definition.string.raw.rei"
            },
            "3": {
              "name": "punctuation.definition.string.rei"
            }
          },
          "end": "(\")(\\2)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.rei"
            },
            "2": {
              "name": "punctuation.definition.string.raw.rei"
            }
          }
        },
        {
          "comment": "characters and bytes",
          "name": "string.quoted.single.char.rei",
          "begin": "(b)?(')",
          "beginCaptures": {
            "1": {
              "name": "string.quoted.byte.raw.rei"
            },
            "2": {
              "name": "punctuation.definition.char.rei"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.char.rei"
            }
          },
          "patterns": [
            {
              "include": "#escapes"
            }
          ]
        }
      ]
    }
  }
}